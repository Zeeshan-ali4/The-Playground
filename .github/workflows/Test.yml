name: Test Pipeline - Terraform Integration

on:
  push:
    branches:
      - Test

permissions:
  id-token: write        # Required for OIDC token generation
  contents: read         # Allows access to the repository contents

jobs:
  discover-modules:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      # Step 1: Checkout code
      - name: Checkout code
        uses: actions/checkout@v2

      # Step 2: Discover Modules
      - name: Discover feature modules
        id: set-matrix
        run: |
          modules=$(find terraform/modules/* -type d -exec basename {} \;)
          matrix=$(echo "$modules" | jq -R -s -c 'split("\n")[:-1]')
          echo "matrix=$matrix" >> $GITHUB_OUTPUT

  sonarcloud:
    name: SonarCloud
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0

    # Step 2: Set up Go environment
      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.20'

      # Step 3: Verify the Go Version
      - name: Verify Go version
        run: go version

      # Step 4: Initialise and install dependencies
      - name: Initialize Go Module and Install Dependencies
        run: |
          cd tests
          if [ ! -f "go.mod" ]; then
            echo "Initializing Go module"
            go mod init github.com/Zeeshan-ali4/The-Playground/tests
          else
            echo "Go module already exists"
          fi
          go get github.com/gruntwork-io/terratest/modules/terraform
          go get github.com/stretchr/testify/assert
          go mod tidy

      # Run Terratest to generate a coverage report
      - name: Run Terratest with Coverage
        run: |
          cd tests
          go test -v -coverprofile=coverage.out ./...
      
      # Upload coverage to SonarCloud
      - name: SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@master
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        with:
          args: >
            -Dsonar.projectKey=Zeeshan-ali4_The-Playground
            -Dsonar.organization=zeeshan-ali4
            -Dsonar.sources=terraform
            -Dsonar.tests=tests
            -Dsonar.go.coverage.reportPaths=tests/coverage.out
  
  terraform:
    needs: discover-modules
    runs-on: ubuntu-latest
    environment: Dev  # Specifies the 'Dev' environment secrets

    strategy:
      matrix:
        module: ${{ fromJson(needs.discover-modules.outputs.matrix) }}

    steps:
      # Step 1: Checkout code
      - name: Checkout code
        uses: actions/checkout@v2

      # Step 2: Set up Go environment
      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.20'

      # Step 3: Verify the Go Version
      - name: Verify Go version
        run: go version

      # Step 4: Initialise and install dependencies
      - name: Initialize Go Module and Install Dependencies
        run: |
          cd tests
          if [ ! -f "go.mod" ]; then
            echo "Initializing Go module"
            go mod init github.com/Zeeshan-ali4/The-Playground/tests
          else
            echo "Go module already exists"
          fi
          go get github.com/gruntwork-io/terratest/modules/terraform
          go get github.com/stretchr/testify/assert
          go mod tidy

      # Step 5: Authenticate to Google Cloud
      - name: Authenticate to Google Cloud with Workload Identity Federation
        uses: google-github-actions/auth@v1
        with:
          workload_identity_provider: "projects/147961138027/locations/global/workloadIdentityPools/github-actions-pool/providers/github-actions-pool"
          service_account: "github-ci-cd-dev@dev-env-441417.iam.gserviceaccount.com"

      # Step 6: Set up Terraform
      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_wrapper: false
          terraform_version: 1.9.8

      # Step 7: Export Environment Variables for Terraform
      - name: Set environment variables
        run: |
          echo "TF_VAR_project_id=${{ secrets.GCP_PROJECT_ID }}" >> $GITHUB_ENV
          echo "TF_VAR_region=europe-west4" >> $GITHUB_ENV
          echo "TF_VAR_zone=europe-west4-a" >> $GITHUB_ENV

      # Step 8: Initialize Terraform
      - name: Initialize Terraform
        working-directory: ./terraform/modules/${{ matrix.module }}
        run: terraform init

      # Step 9: Validate Terraform Code
      - name: Validate Terraform
        working-directory: ./terraform/modules/${{ matrix.module }}
        run: terraform validate      

      # Step 10: Plan Terraform Changes
      - name: Plan Terraform Changes
        working-directory: ./terraform/modules/${{ matrix.module }}
        run: terraform plan -out=tfplan
      
      # Step 11: Apply Terraform Changes for Testing
      - name: Apply Terraform Changes
        working-directory: ./terraform/modules/${{ matrix.module }}
        run: terraform apply -auto-approve tfplan

      # Step 12: Run Terratest for Each Module
      - name: Run Terratest
        env:
          TERRAFORM_DIR: ../terraform/modules/${{ matrix.module }}
        run: |
          cd tests
          go test -v -run TestTerraformModule -args ../terraform/modules/${{ matrix.module }}
      
      # Step 13: Validate Terraform Outputs (Optional)
      - name: Validate Terraform Outputs
        working-directory: ./terraform/modules/${{ matrix.module }}
        run: terraform output -json > terraform_outputs.json

      # Step 14: Cleanup Resources
      - name: Cleanup Terraform Resources
        if: always()  # Ensure cleanup runs even if earlier steps fail
        working-directory: ./terraform/modules/${{ matrix.module }}
        run: terraform destroy -auto-approve
