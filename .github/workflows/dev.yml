name: Dev Pipeline - Terraform Integration

on:
  push:
    branches:
      - Dev---matrix-test

permissions:
  id-token: write        # Required for OIDC token generation
  contents: read         # Allows access to the repository contents

jobs:
  terraform:
    runs-on: ubuntu-latest
    environment: Dev  # Specifies the 'Dev' environment secrets

    steps:
      # Step 1: Checkout code
      - name: Checkout code
        uses: actions/checkout@v2

      # Step 2: Authenticate to Google Cloud
      - name: Authenticate to Google Cloud with Workload Identity Federation
        uses: google-github-actions/auth@v1
        with:
          workload_identity_provider: "projects/147961138027/locations/global/workloadIdentityPools/github-actions-pool/providers/github-actions-pool"
          service_account: "github-ci-cd-dev@dev-env-441417.iam.gserviceaccount.com"

      # Step 3: Set up Terraform
      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.6

      # Step 4: Export Environment Variables for Terraform
      - name: Set environment variables
        run: |
          echo "TF_VAR_project_id=${{ secrets.GCP_PROJECT_ID }}" >> $GITHUB_ENV
          echo "TF_VAR_region=europe-west4" >> $GITHUB_ENV
          echo "TF_VAR_zone=europe-west4-a" >> $GITHUB_ENV

      # Step 5: Initialize Terraform
      - name: Initialize Terraform
        working-directory: ./terraform-config
        run: terraform init

      # Step 6: Plan Terraform Changes
      - name: Plan Terraform Changes
        working-directory: ./terraform-config
        run: terraform plan -out=tfplan

      # Step 7: Apply Terraform Changes
      - name: Apply Terraform Changes
        working-directory: ./terraform-config
        run: terraform apply -auto-approve tfplan

      # Step 8: (Optional) Output Resources
      - name: Output Resource Information
        working-directory: ./terraform-config
        run: terraform output -json > terraform_outputs.json

      # Step 9: (Optional) Cleanup Resources (if required)
      - name: Cleanup Resources
        if: always()  # Ensure cleanup runs even if earlier steps fail
        working-directory: ./terraform-config
        run: terraform destroy -auto-approve
